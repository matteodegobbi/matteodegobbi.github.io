[{"contentpragma once #include \u0026lt;algorithm\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;stdexcept\u0026gt; #include \u0026lt;utility\u0026gt; #include \u0026lt;vector\u0026gt; template \u0026lt;typename Key, typename Val, int M\u0026gt; class BTree { // M is the minimum degree of the B-tree. // Max keys in a node: 2*M - 1 // Min keys in a non-root node: M - 1 private: struct Node { bool is_leaf; std::vector\u0026lt;Key\u0026gt; keys; std::vector\u0026lt;Val\u0026gt; vals; std::vector\u0026lt;Node *\u0026gt; children; Node(bool leaf = false) : is_leaf(leaf) {} // NOTE: destructor called recursively ~Node() { for (Node *child : children) { delete child; } } }; Node *root = nullptr; int _size = 0; int _height = 0; int split_counter = 0; void _clear(Node *node) { if (node != nullptr) { delete node; // The destructor of sruct Node deletes children recursively } } // NOTE: Functions for search in this section Val *_search(Node *node, const Key \u0026amp;k) { if (node == nullptr) { return nullptr; } // STL binary search to get first element \u0026gt;= to k auto it = std::lower_bound(node-\u0026gt;keys.begin(), node-\u0026gt;keys.end(), k); // get index from iterator int i = std::distance(node-\u0026gt;keys.begin(), it); // found k if (it != node-\u0026gt;keys.end() \u0026amp;\u0026amp; *it == k) { return \u0026amp;node-\u0026gt;vals[i]; } if (node-\u0026gt;is_leaf) { return nullptr; } return _search(node-\u0026gt;children[i], k); } // NOTE: Functions for insertion in this section // // splits the child at `parent-\u0026gt;children[child_index]` void _split_child(Node *parent, int child_index) { split_counter++; Node *child_to_split = parent-\u0026gt;children[child_index]; // create new sibling for splitting the node in half Node *new_child = new Node(child_to_split-\u0026gt;is_leaf); // Promote the median key and value to the parent node parent-\u0026gt;keys.insert(parent-\u0026gt;keys.begin() + child_index, child_to_split-\u0026gt;keys[M - 1]); parent-\u0026gt;vals.insert(parent-\u0026gt;vals.begin() + child_index, child_to_split-\u0026gt;vals[M - 1]); // Put the sibling as a child of the parent // It will be the sibling to the right of the split node parent-\u0026gt;children.insert(parent-\u0026gt;children.begin() + child_index + 1, new_child); // move half of keys and values to the split node\u0026#39;s sibling new_child-\u0026gt;keys.assign(child_to_split-\u0026gt;keys.begin() + M, child_to_split-\u0026gt;keys.end()); new_child-\u0026gt;vals.assign(child_to_split-\u0026gt;vals.begin() + M, child_to_split-\u0026gt;vals.end()); child_to_split-\u0026gt;keys.resize(M - 1); child_to_split-\u0026gt;vals.resize(M - 1); // if the split node was not a leaf, move its children into its new sibling if (!child_to_split-\u0026gt;is_leaf) { new_child-\u0026gt;children.assign(child_to_split-\u0026gt;children.begin() + M, child_to_split-\u0026gt;children.end()); child_to_split-\u0026gt;children.resize(M); } } // NOTE: IMPORTANT INVARIANT node should not be already full // otherwise it will overflow, only call this from public method void _insert_rec(Node *node, const Key \u0026amp;k, const Val \u0026amp;v) { // STL binary search to get index of first key \u0026gt;= k auto it = std::lower_bound(node-\u0026gt;keys.begin(), node-\u0026gt;keys.end(), k); int i = std::distance(node-\u0026gt;keys.begin(), it); // get index in vector of iterator it if (node-\u0026gt;is_leaf) { // case where we found already existing key, update the val if (it != node-\u0026gt;keys.end() \u0026amp;\u0026amp; *it == k) { node-\u0026gt;vals[i] = v; return; } // regular case just insert the key in the leaf node-\u0026gt;keys.insert(it, k); node-\u0026gt;vals.insert(node-\u0026gt;vals.begin() + i, v); _size++; } else { // case where we found already existing key, update the val, same as in // leaf if (it != node-\u0026gt;keys.end() \u0026amp;\u0026amp; *it == k) { node-\u0026gt;vals[i] = v; return; } // NOTE: important, guarantees that no node will overflow // splits the child we will visit recursively in case // it\u0026#39;s already full if (node-\u0026gt;children[i]-\u0026gt;keys.size() == 2 * M - 1) { _split_child(node, i); // increase variabile i in case i need to go to the new sibling after // the split if (k \u0026gt; node-\u0026gt;keys[i]) { i++; } } _insert_rec(node-\u0026gt;children[i], k, v); } } // NOTE: Functions for deletion in this section std::pair\u0026lt;Key, Val\u0026gt; _get_pred(Node *node, int i) { Node *cur = node-\u0026gt;children[i]; while (!cur-\u0026gt;is_leaf) { cur = cur-\u0026gt;children.back(); } return {cur-\u0026gt;keys.back(), cur-\u0026gt;vals.back()}; } std::pair\u0026lt;Key, Val\u0026gt; _get_succ(Node *node, int i) { Node *cur = node-\u0026gt;children[i + 1]; while (!cur-\u0026gt;is_leaf) { cur = cur-\u0026gt;children.front(); } return {cur-\u0026gt;keys.front(), cur-\u0026gt;vals.front()}; } void _borrow_from_prev(Node *node, int i) { Node *child = node-\u0026gt;children[i]; Node *sibling = node-\u0026gt;children[i - 1]; // take key from parent child-\u0026gt;keys.insert(child-\u0026gt;keys.begin(), node-\u0026gt;keys[i - 1]); child-\u0026gt;vals.insert(child-\u0026gt;vals.begin(), node-\u0026gt;vals[i - 1]); // eventually add children inherited from key taken from parent if (!child-\u0026gt;is_leaf) { child-\u0026gt;children.insert(child-\u0026gt;children.begin(), sibling-\u0026gt;children.back()); sibling-\u0026gt;children.pop_back(); } node-\u0026gt;keys[i - 1] = sibling-\u0026gt;keys.back(); node-\u0026gt;vals[i - 1] = sibling-\u0026gt;vals.back(); sibling-\u0026gt;keys.pop_back(); sibling-\u0026gt;vals.pop_back(); } void _borrow_from_next(Node *node, int i) { Node *child = node-\u0026gt;children[i]; Node *sibling = node-\u0026gt;children[i + 1]; child-\u0026gt;keys.push_back(node-\u0026gt;keys[i]); child-\u0026gt;vals.push_back(node-\u0026gt;vals[i]); if (!child-\u0026gt;is_leaf) { child-\u0026gt;children.push_back(sibling-\u0026gt;children.front()); sibling-\u0026gt;children.erase(sibling-\u0026gt;children.begin()); } node-\u0026gt;keys[i] = sibling-\u0026gt;keys.front(); node-\u0026gt;vals[i] = sibling-\u0026gt;vals.front(); sibling-\u0026gt;keys.erase(sibling-\u0026gt;keys.begin()); sibling-\u0026gt;vals.erase(sibling-\u0026gt;vals.begin()); } void _merge(Node *node, int i) { Node *child = node-\u0026gt;children[i]; Node *sibling = node-\u0026gt;children[i + 1]; child-\u0026gt;keys.push_back(node-\u0026gt;keys[i]); child-\u0026gt;vals.push_back(node-\u0026gt;vals[i]); child-\u0026gt;keys.insert(child-\u0026gt;keys.end(), sibling-\u0026gt;keys.begin(), sibling-\u0026gt;keys.end()); child-\u0026gt;vals.insert(child-\u0026gt;vals.end(), sibling-\u0026gt;vals.begin(), sibling-\u0026gt;vals.end()); if (!child-\u0026gt;is_leaf) { child-\u0026gt;children.insert(child-\u0026gt;children.end(), sibling-\u0026gt;children.begin(), sibling-\u0026gt;children.end()); sibling-\u0026gt;children.clear(); // Important: prevent double deletion } node-\u0026gt;keys.erase(node-\u0026gt;keys.begin() + i); node-\u0026gt;vals.erase(node-\u0026gt;vals.begin() + i); node-\u0026gt;children.erase(node-\u0026gt;children.begin() + i + 1); delete sibling; } void _fill(Node *node, int i) { // if i can borrow from left sibling if (i != 0 \u0026amp;\u0026amp; node-\u0026gt;children[i - 1]-\u0026gt;keys.size() \u0026gt;= M) { _borrow_from_prev(node, i); // if i can borrow from right sibling } else if (i != node-\u0026gt;keys.size() \u0026amp;\u0026amp; node-\u0026gt;children[i + 1]-\u0026gt;keys.size() \u0026gt;= M) { _borrow_from_next(node, i); // if i cannot borrow i need to merge the siblings into a node } else { if (i != node-\u0026gt;keys.size()) { _merge(node, i); } else { _merge(node, i - 1); } } } void _remove_in_leaf(Node *node, int i) { node-\u0026gt;keys.erase(node-\u0026gt;keys.begin() + i); node-\u0026gt;vals.erase(node-\u0026gt;vals.begin() + i); _size--; } void _remove_in_internal(Node *node, int i) { Key k = node-\u0026gt;keys[i]; if (node-\u0026gt;children[i]-\u0026gt;keys.size() \u0026gt;= M) { auto [pred_key, pred_val] = _get_pred(node, i); node-\u0026gt;keys[i] = pred_key; node-\u0026gt;vals[i] = pred_val; _remove(node-\u0026gt;children[i], pred_key); } else if (node-\u0026gt;children[i + 1]-\u0026gt;keys.size() \u0026gt;= M) { auto [succ_key, succ_val] = _get_succ(node, i); node-\u0026gt;keys[i] = succ_key; node-\u0026gt;vals[i] = succ_val; _remove(node-\u0026gt;children[i + 1], succ_key); } else { _merge(node, i); _remove(node-\u0026gt;children[i], k); } } void _remove(Node *node, const Key \u0026amp;k) { // STL binary search to get index of first key \u0026gt;= k auto it = std::lower_bound(node-\u0026gt;keys.begin(), node-\u0026gt;keys.end(), k); int i = std::distance(node-\u0026gt;keys.begin(), it); if (i \u0026lt; node-\u0026gt;keys.size() \u0026amp;\u0026amp; node-\u0026gt;keys[i] == k) { if (node-\u0026gt;is_leaf) { _remove_in_leaf(node, i); } else { _remove_in_internal(node, i); } } else { if (node-\u0026gt;is_leaf) { return; // key not found nothing is removed } bool is_last_child = (i == node-\u0026gt;keys.size()); // to keep invariant about minimum number of keys // in a node is \u0026gt;= M-1 if (node-\u0026gt;children[i]-\u0026gt;keys.size() \u0026lt; M) { _fill(node, i); } if (is_last_child \u0026amp;\u0026amp; i \u0026gt; node-\u0026gt;keys.size()) { _remove(node-\u0026gt;children[i - 1], k); } else { _remove(node-\u0026gt;children[i], k); } } } // NOTE: other functions not related to search, insertio and removal in this // section void _inorder(Node *node, std::vector\u0026lt;std::pair\u0026lt;Key, Val\u0026gt;\u0026gt; \u0026amp;v) const { if (node == nullptr) return; int i; for (i = 0; i \u0026lt; node-\u0026gt;keys.size(); i++) { if (!node-\u0026gt;is_leaf) { _inorder(node-\u0026gt;children[i], v); } v.push_back(std::make_pair(node-\u0026gt;keys[i], node-\u0026gt;vals[i])); } if (!node-\u0026gt;is_leaf) { _inorder(node-\u0026gt;children[i], v); } } // NOTE: only used for testing the actual height // computation dont use this, it\u0026#39;s super naive int _height_naive(Node *node) const { if (node == nullptr) { return -1; } if (node-\u0026gt;is_leaf) { return 0; } int max_child_height = -1; for (Node *child : node-\u0026gt;children) { int child_height = _height_naive(child); max_child_height = std::max(max_child_height, child_height); } return 1 + max_child_height; } public: BTree() { root = new Node(true); } ~BTree() { _clear(root); } int size() const { return _size; } bool empty() const { return _size == 0; } void insert(const Key \u0026amp;k, const Val \u0026amp;v) { split_counter = 0; Node *r = root; // if root is full make a new one with old root as child if (r-\u0026gt;keys.size() == 2 * M - 1) { Node *s = new Node(); root = s; s-\u0026gt;children.push_back(r); _split_child(s, 0); ++_height; _insert_rec(s, k, v); } else { _insert_rec(r, k, v); } } void remove(const Key \u0026amp;k) { if (!root) { return; } _remove(root, k); // NOTE: case where we need to shrink tree height by 1 if (root-\u0026gt;keys.empty() \u0026amp;\u0026amp; !root-\u0026gt;is_leaf) { Node *old_root = root; root = root-\u0026gt;children[0]; old_root-\u0026gt;children .clear(); // Prevent destructor from deleting the new root delete old_root; --_height; } } Val \u0026amp;search(const Key \u0026amp;k) { Val *result = _search(root, k); if (result == nullptr) { throw std::runtime_error(\u0026#34;Key not found\u0026#34;); } return *result; } const Val \u0026amp;search(const Key \u0026amp;k) const { Val *result = _search(root, k); if (result == nullptr) { throw std::runtime_error(\u0026#34;Key not found\u0026#34;); } return *result; } bool contains(const Key \u0026amp;k) { return _search(root, k) != nullptr; } void inorder_vector(std::vector\u0026lt;std::pair\u0026lt;Key, Val\u0026gt;\u0026gt; \u0026amp;v) const { v.clear(); _inorder(root, v); } int height() const { return _height; } int last_insert_splits() const { return split_counter; } void clear() { _clear(root); root = new Node(true); _size = 0; } // NOTE: only used for testing the actual height // computation dont use this, it\u0026#39;s super naive int _height_naive() { return _height_naive(root); } }; ","date":"2025-06-13T23:34:39+02:00","permalink":"https://matteodegobbi.github.io/p/prova_codice/","title":"Prova_codice"},{"content":"Pagina di prova! Vediamo se funziona 😳\n","date":"2025-06-12T23:03:09+02:00","permalink":"https://matteodegobbi.github.io/p/prova/","title":"prova"},{"content":"Pagina di prova! Vediamo se funziona 😳\n","date":"2022-06-12T23:03:09+02:00","permalink":"https://matteodegobbi.github.io/p/prova2/","title":"prova2"}]